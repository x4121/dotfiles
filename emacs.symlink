(require 'package)
(push '("marmalade" . "http://marmalade-repo.org/packages/")
    package-archives )
(push '("melpa" . "http://melpa.milkbox.net/packages/")
    package-archives)

(setq package-list '(evil-org
                     evil-surround
                     powerline
                     powerline-evil
                     color-theme-sanityinc-solarized
                     org-ref))

(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))

(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

(evil-mode 1)
(require 'evil-leader)
(setq evil-leader/in-all-states t)
(evil-leader/set-leader ",")
(evil-mode nil)
(global-evil-leader-mode 1)
(evil-mode 1)
(require 'evil-surround)
(global-evil-surround-mode 1)

(require 'powerline)
(powerline-default-theme)
(require 'powerline-evil)

(require 'color-theme-sanityinc-solarized)
(color-theme-sanityinc-solarized--define-theme dark)

(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
;(setq org-latex-pdf-process 
;   "latexmk -pdflatex='lualatex -shell-escape -interaction nonstopmode' -pdf -f  %f")
 (setq org-latex-pdf-process
       '("pdflatex -interaction nonstopmode -output-directory %o %f" 
 	"bibtex %b"
 	"pdflatex -interaction nonstopmode -output-directory %o %f" 
 	"pdflatex -interaction nonstopmode -output-directory %o %f"))

(require 'org-ref)
(require 'org-ref-latex)
(require 'org-ref-pdf)
(require 'org-ref-url-utils)
(require 'ox-latex)

(add-to-list 'org-latex-classes
             '("ieee"
               "\\documentclass[11pt,conference]{IEEEtran}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

(setq org-latex-listings 'listings)
(setq org-latex-listings-options
    '(("frame" "lines")
      ("basicstyle" "\\footnotesize\\ttfamily")
      ("numbers" "left")
      ("numberstyle" "\\tiny")))
(setq org-export-allow-bind-keywords "t")

;;** nameref link
(org-add-link-type
 "nameref"
 (lambda (label)
   "on clicking goto the label. Navigate back with C-c &"
   (org-mark-ring-push)
   ;; next search from beginning of the buffer it is possible you would not find
   ;; the label if narrowing is in effect
   (widen)
   (unless
       (or
        ;; our label links
        (progn
          (goto-char (point-min))
          (re-search-forward (format "label:%s\\b" label) nil t))

        ;; a latex label
        (progn
          (goto-char (point-min))
          (re-search-forward (format "\\label{%s}" label) nil t))

        ;; #+label: name  org-definition
        (progn
          (goto-char (point-min))
          (re-search-forward
           (format "^#\\+label:\\s-*\\(%s\\)\\b" label) nil t))

        ;; org tblname
        (progn
          (goto-char (point-min))
          (re-search-forward
           (format "^#\\+tblname:\\s-*\\(%s\\)\\b" label) nil t))

	;; a #+name
	(progn
          (goto-char (point-min))
          (re-search-forward
           (format "^#\\+name:\\s-*\\(%s\\)\\b" label) nil t))

	;; CUSTOM_ID
	(progn
	  (goto-char (point-min))
	  (let ((p (org-map-entries
		    (lambda ()
		      (point))
		    (format "CUSTOM_ID=\"%s\"" label))))
	    (if (not (= 1 (length p)))
		nil
	      (goto-char (car p))))))

     ;; we did not find anything, so go back to where we came
     (org-mark-ring-goto)
     (error "%s not found" label))
   (org-show-entry)
   (message "go back with (org-mark-ring-goto) `C-c &`"))
                                        ;formatting
 (lambda (keyword desc format)
   (cond
    ((eq format 'html) (format "<a href=\"#%s\">%s</a>" keyword keyword))
    ((eq format 'latex)
     (format "\\nameref{%s}" keyword)))))

(setq inhibit-startup-message t)
(setq truncate-lines nil)
(fset 'yes-or-no-p 'y-or-n-p)
(setq line-number-mode t)
(setq column-number-mode t)
(when (fboundp 'toggle-scroll-bar)
  (toggle-scroll-bar -1))
